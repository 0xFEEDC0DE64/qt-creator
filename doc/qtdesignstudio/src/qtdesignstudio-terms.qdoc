/****************************************************************************
**
** Copyright (C) 2021 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the Qt Design Studio documentation.
**
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
**
****************************************************************************/

/*!
    \page studio-terms.html
    \previouspage studio-faq.html
    \nextpage technical-support.html

    \title Concepts and Terms

    This topic describes main \QDS concepts and terms:

    \list
        \li \l{glossary-asset}{Asset}
        \li \l{glossary-component}{Component}
        \li \l{glossary-device}{Device}
        \li \l{glossary-Project}{Project}
    \endlist

    \section1 Asset
    \target glossary-asset

    An \e asset is an image, font file, 3D model, or other supported file that
    you add to your \e project.

    Assets are packaged with \e components for delivery to users.

    Read more about assets:

    \list
        \li \l{Assets}
    \endlist

    \section1 Component
    \target glossary-component

    A \e component is a reusable building block for a UI.

    \QDS comes with \e {preset components} that you can use in your project.
    These are similar to \e Symbols in Sketch or \e Prefab in Unity.

    Some of the preset components represent simple shapes, text, or images,
    while others represent complex UI controls with full functionality, such
    as spin boxes or sliders.

    You can modify the \e properties of the preset components and combine them
    to build your own components.

    A component is specified within one file (with the file extension
    \e ui.qml or \e .qml). For example, a Button component may be defined
    in Button.ui.qml. Typically, the visual appearance of a component is
    defined in a \e {UI file}.

    Read more about components:

    \list
        \li \l{Creating Components}{Library}
        \li \l{Component Types}{Preset Components}
        \li \l{Creating Component Instances}{My Components}
    \endlist

    \section1 Device
    \target glossary-device

    An embedded device.

    Read more about devices:

    \list
        \li \l{Previewing on Devices}
    \endlist

    \section1 Project
    \target glossary-project

    A project is a container for the \e components and \e assets that you
    use in your UI. You can \ e package the UI and preview or run it on
    different operating systems on the desktop or a \l{glossary-device}{device}.

    You use templates to create different types of projects according to your
    needs. The templates add preset components to the project by default. For
    example, if you create a 3D project, preset 3D components are added to it.
    You can add more preset components in \uicontrol Library.

    Read more about projects:

    \list
        \li \l{Creating Projects}
    \endlist

    \omit

    ## The following terms might or might not come back, but for now, the
    ## descriptions are considered too technical for the designer target group.

    \section1 Deploy Configuration
    \target glossary-deploy-config

    Handles the packaging and copying of the necessary files to a location
    you want to preview the UI at. The files can be copied to a location in
    the file system of the development PC or a \l{glossary-device}{device}.

    \section1 Kit
    \target glossary-buildandrun-kit

    \QDS groups run settings as kits to make cross-platform development easier.
    Each kit consists of a set of values that define one environment, such as a
    \l{glossary-device} {device} to preview the UI on.

    \section1 Mode
    \target glossary-mode

    Adapts the \QDS UI to the different UI design
    tasks at hand. Each mode has its own view that shows only the information
    required for performing a particular task, and provides only the most
    relevant features and functions related to it. As a result, the majority
    of the \QDS window area is always dedicated to the actual task.

   \section1 Run Configuration
    \target glossary-run-config

    Starts the UI in the location where it was copied by the
    \e {deploy configuration}. By default, when you run a project, \QDS
    deploys it to the \l{glossary-device}{device} specified in the
    selected \l{glossary-buildandrun-kit}{kit}, and runs it there. However,
    if you have not made any changes to the project since you last deployed
    it, \QC simply runs it again.

    \endomit
*/
